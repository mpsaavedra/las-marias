// <auto-generated/>
#nullable enable

namespace LasMarias.WareHouse.Shared.Client
{
    /// <summary>
    /// Product Attribute queries
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetAttributesResult : global::System.IEquatable<GetAttributesResult>, IGetAttributesResult
    {
        public GetAttributesResult(global::LasMarias.WareHouse.Shared.Client.IGetAttributes_Attributes? attributes)
        {
            Attributes = attributes;
        }

        /// <summary>
        /// List all available attributes names
        /// </summary>
        public global::LasMarias.WareHouse.Shared.Client.IGetAttributes_Attributes? Attributes { get; }

        public virtual global::System.Boolean Equals(GetAttributesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Attributes is null && other.Attributes is null) || Attributes != null && Attributes.Equals(other.Attributes)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAttributesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Attributes != null)
                {
                    hash ^= 397 * Attributes.GetHashCode();
                }

                return hash;
            }
        }
    }
}
