// <auto-generated/>
#nullable enable

namespace LasMarias.WareHouse.Shared.Client
{
    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetAttributes_Attributes_AttributesConnection : global::System.IEquatable<GetAttributes_Attributes_AttributesConnection>, IGetAttributes_Attributes_AttributesConnection
    {
        public GetAttributes_Attributes_AttributesConnection(global::System.Collections.Generic.IReadOnlyList<global::LasMarias.WareHouse.Shared.Client.IGetAttributes_Attributes_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::LasMarias.WareHouse.Shared.Client.IGetAttributes_Attributes_Nodes>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetAttributes_Attributes_AttributesConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAttributes_Attributes_AttributesConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }
}
