// <auto-generated/>
#nullable enable

namespace LasMarias.WareHouse.Shared.Client
{
    /// <summary>
    /// Represents the operation service of the GetAttributes GraphQL operation
    /// <code>
    /// query GetAttributes {
    ///   attributes {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       value
    ///       attributeName {
    ///         __typename
    ///         name
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetAttributesQuery : global::LasMarias.WareHouse.Shared.Client.IGetAttributesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAttributesResult> _operationExecutor;
        public GetAttributesQuery(global::StrawberryShake.IOperationExecutor<IGetAttributesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAttributesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAttributesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAttributesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAttributesQueryDocument.Instance.Hash.Value, name: "GetAttributes", document: GetAttributesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }
}
