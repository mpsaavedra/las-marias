schema {
  query: Query
  mutation: Mutation
}

"Product Attribute queries"
type Query {
  "List all available attributes names"
  attributes("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AttributeFilterInput order: [AttributeSortInput!]): AttributesConnection
  "List all available attributes names"
  attributesNames("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AttributeNameFilterInput order: [AttributeNameSortInput!]): AttributesNamesConnection
  "List all available Brands"
  brands("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BrandFilterInput order: [BrandSortInput!]): BrandsConnection
  "List all available product Categories"
  categories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CategoryFilterInput order: [CategorySortInput!]): CategoriesConnection
  "List all available measure units"
  measureUnits("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: MeasureUnitFilterInput order: [MeasureUnitSortInput!]): MeasureUnitsConnection
  "List all movements"
  movements("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: MovementFilterInput order: [MovementSortInput!]): MovementsConnection
  "List all available price histories"
  priceHistory("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PriceHistoryFilterInput order: [PriceHistorySortInput!]): PriceHistoryConnection
  "List all available product brands relations"
  productBrands("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ProductBrandFilterInput order: [ProductBrandSortInput!]): ProductBrandsConnection
  "List all available Product Movements"
  productMovements("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ProductMovementFilterInput order: [ProductMovementSortInput!]): ProductMovementsConnection
  "List all available product photos"
  productPhotos("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ProductPhotoFilterInput order: [ProductPhotoSortInput!]): ProductPhotosConnection
  "List all available products"
  products("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ProductFilterInput order: [ProductSortInput!]): ProductsConnection
  "List all available vendor brands relations"
  vendorBrands("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: VendorBrandFilterInput order: [VendorBrandSortInput!]): VendorBrandsConnection
  "List all available vendors"
  vendors("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: VendorFilterInput order: [VendorSortInput!]): VendorsConnection
}

"A connection to a list of items."
type AttributesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AttributesEdge!]
  "A flattened list of the nodes."
  nodes: [Attribute!]
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type AttributesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Attribute!
}

type Attribute {
  attributeId: Long!
  value: String!
  description: String
  enable: Boolean!
  measureUnitId: Long
  measureUnit: MeasureUnit
  attributeNameId: Long!
  attributeName: AttributeName
  products(where: ProductFilterInput order: [ProductSortInput!]): [Product!]!
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

type MeasureUnit {
  measureUnitId: Long!
  name: String!
  code: String!
  cast: Cast!
  enable: Boolean!
  products(where: ProductFilterInput order: [ProductSortInput!]): [Product!]!
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

enum Cast {
  TO_STRING
  TO_INTEGER
  TO_DOUBLE
  TO_DECIMAL
}

type Product {
  productId: Long!
  name: String!
  description: String
  note: String
  price: Decimal!
  sellingPrice: Decimal!
  amount: Decimal
  reOrderLevel: Decimal
  measureUnitId: Long
  measureUnit(where: MeasureUnitFilterInput order: [MeasureUnitSortInput!]): MeasureUnit
  attributes(where: AttributeFilterInput order: [AttributeSortInput!]): [Attribute!]
  productPhotos(where: ProductPhotoFilterInput order: [ProductPhotoSortInput!]): [ProductPhoto!]
  categories(where: CategoryFilterInput order: [CategorySortInput!]): [Category!]
  priceHistories(where: PriceHistoryFilterInput order: [PriceHistorySortInput!]): [PriceHistory!]
  productMovements(where: ProductMovementFilterInput order: [ProductMovementSortInput!]): [ProductMovement!]
  productBrands(where: ProductBrandFilterInput order: [ProductBrandSortInput!]): [ProductBrand!]
  onStock: Boolean!
  notifyReOrder: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

"The built-in `Decimal` scalar type."
scalar Decimal

input MeasureUnitFilterInput {
  and: [MeasureUnitFilterInput!]
  or: [MeasureUnitFilterInput!]
  measureUnitId: ComparableInt64OperationFilterInput
  name: StringOperationFilterInput
  code: StringOperationFilterInput
  cast: CastOperationFilterInput
  enable: BooleanOperationFilterInput
  products: ListFilterInputTypeOfProductFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input ComparableInt64OperationFilterInput {
  eq: Long
  neq: Long
  in: [Long!]
  nin: [Long!]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input CastOperationFilterInput {
  eq: Cast
  neq: Cast
  in: [Cast!]
  nin: [Cast!]
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ListFilterInputTypeOfProductFilterInput {
  all: ProductFilterInput
  none: ProductFilterInput
  some: ProductFilterInput
  any: Boolean
}

input ProductFilterInput {
  and: [ProductFilterInput!]
  or: [ProductFilterInput!]
  productId: ComparableInt64OperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  note: StringOperationFilterInput
  price: ComparableDecimalOperationFilterInput
  sellingPrice: ComparableDecimalOperationFilterInput
  amount: ComparableNullableOfDecimalOperationFilterInput
  reOrderLevel: ComparableNullableOfDecimalOperationFilterInput
  measureUnitId: ComparableNullableOfInt64OperationFilterInput
  measureUnit: MeasureUnitFilterInput
  attributes: ListFilterInputTypeOfAttributeFilterInput
  productPhotos: ListFilterInputTypeOfProductPhotoFilterInput
  categories: ListFilterInputTypeOfCategoryFilterInput
  priceHistories: ListFilterInputTypeOfPriceHistoryFilterInput
  productMovements: ListFilterInputTypeOfProductMovementFilterInput
  productBrands: ListFilterInputTypeOfProductBrandFilterInput
  onStock: BooleanOperationFilterInput
  notifyReOrder: BooleanOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input ComparableDecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal!]
  nin: [Decimal!]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ComparableNullableOfDecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ComparableNullableOfInt64OperationFilterInput {
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input ListFilterInputTypeOfAttributeFilterInput {
  all: AttributeFilterInput
  none: AttributeFilterInput
  some: AttributeFilterInput
  any: Boolean
}

input AttributeFilterInput {
  and: [AttributeFilterInput!]
  or: [AttributeFilterInput!]
  attributeId: ComparableInt64OperationFilterInput
  value: StringOperationFilterInput
  description: StringOperationFilterInput
  enable: BooleanOperationFilterInput
  measureUnitId: ComparableNullableOfInt64OperationFilterInput
  measureUnit: MeasureUnitFilterInput
  attributeNameId: ComparableInt64OperationFilterInput
  attributeName: AttributeNameFilterInput
  products: ListFilterInputTypeOfProductFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input AttributeNameFilterInput {
  and: [AttributeNameFilterInput!]
  or: [AttributeNameFilterInput!]
  attributeNameId: ComparableInt64OperationFilterInput
  name: StringOperationFilterInput
  enable: BooleanOperationFilterInput
  attributes: ListFilterInputTypeOfAttributeFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

input ComparableNullableOfDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ListFilterInputTypeOfProductPhotoFilterInput {
  all: ProductPhotoFilterInput
  none: ProductPhotoFilterInput
  some: ProductPhotoFilterInput
  any: Boolean
}

input ProductPhotoFilterInput {
  and: [ProductPhotoFilterInput!]
  or: [ProductPhotoFilterInput!]
  productPhotoId: ComparableInt64OperationFilterInput
  photo: ListComparableByteOperationFilterInput
  photoUrl: StringOperationFilterInput
  designColor: StringOperationFilterInput
  isInitialPhoto: BooleanOperationFilterInput
  productId: ComparableInt64OperationFilterInput
  product: ProductFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input ListComparableByteOperationFilterInput {
  all: ComparableByteOperationFilterInput
  none: ComparableByteOperationFilterInput
  some: ComparableByteOperationFilterInput
  any: Boolean
}

input ComparableByteOperationFilterInput {
  eq: Byte
  neq: Byte
  in: [Byte!]
  nin: [Byte!]
  gt: Byte
  ngt: Byte
  gte: Byte
  ngte: Byte
  lt: Byte
  nlt: Byte
  lte: Byte
  nlte: Byte
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

input ListFilterInputTypeOfCategoryFilterInput {
  all: CategoryFilterInput
  none: CategoryFilterInput
  some: CategoryFilterInput
  any: Boolean
}

input CategoryFilterInput {
  and: [CategoryFilterInput!]
  or: [CategoryFilterInput!]
  categoryId: ComparableInt64OperationFilterInput
  name: StringOperationFilterInput
  code: StringOperationFilterInput
  enable: BooleanOperationFilterInput
  parentCategoryId: ComparableNullableOfInt64OperationFilterInput
  parentCategory: CategoryFilterInput
  childCategories: ListFilterInputTypeOfCategoryFilterInput
  products: ListFilterInputTypeOfProductFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input ListFilterInputTypeOfPriceHistoryFilterInput {
  all: PriceHistoryFilterInput
  none: PriceHistoryFilterInput
  some: PriceHistoryFilterInput
  any: Boolean
}

input PriceHistoryFilterInput {
  and: [PriceHistoryFilterInput!]
  or: [PriceHistoryFilterInput!]
  priceHistoryId: ComparableInt64OperationFilterInput
  productId: ComparableInt64OperationFilterInput
  product: ProductFilterInput
  oldPrice: ComparableDecimalOperationFilterInput
  newPrice: ComparableDecimalOperationFilterInput
  applicationUserId: StringOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input ListFilterInputTypeOfProductMovementFilterInput {
  all: ProductMovementFilterInput
  none: ProductMovementFilterInput
  some: ProductMovementFilterInput
  any: Boolean
}

input ProductMovementFilterInput {
  and: [ProductMovementFilterInput!]
  or: [ProductMovementFilterInput!]
  productMovementId: ComparableInt64OperationFilterInput
  productId: ComparableInt64OperationFilterInput
  movementId: ComparableInt64OperationFilterInput
  product: ProductFilterInput
  movement: MovementFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input MovementFilterInput {
  and: [MovementFilterInput!]
  or: [MovementFilterInput!]
  movementId: ComparableInt64OperationFilterInput
  amount: ComparableDecimalOperationFilterInput
  price: ComparableNullableOfDecimalOperationFilterInput
  description: StringOperationFilterInput
  applicationUserId: StringOperationFilterInput
  productMovements: ListFilterInputTypeOfProductMovementFilterInput
  vendorId: ComparableNullableOfInt64OperationFilterInput
  vendor: VendorFilterInput
  standType: StandTypeOperationFilterInput
  movementType: MovementTypeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input VendorFilterInput {
  and: [VendorFilterInput!]
  or: [VendorFilterInput!]
  vendorId: ComparableInt64OperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  enable: BooleanOperationFilterInput
  movements: ListFilterInputTypeOfMovementFilterInput
  vendorBrands: ListFilterInputTypeOfVendorBrandFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input ListFilterInputTypeOfMovementFilterInput {
  all: MovementFilterInput
  none: MovementFilterInput
  some: MovementFilterInput
  any: Boolean
}

input ListFilterInputTypeOfVendorBrandFilterInput {
  all: VendorBrandFilterInput
  none: VendorBrandFilterInput
  some: VendorBrandFilterInput
  any: Boolean
}

input VendorBrandFilterInput {
  and: [VendorBrandFilterInput!]
  or: [VendorBrandFilterInput!]
  vendorBrandId: ComparableInt64OperationFilterInput
  vendorId: ComparableInt64OperationFilterInput
  brandId: ComparableInt64OperationFilterInput
  vendor: VendorFilterInput
  brand: BrandFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input BrandFilterInput {
  and: [BrandFilterInput!]
  or: [BrandFilterInput!]
  brandId: ComparableInt64OperationFilterInput
  name: StringOperationFilterInput
  enable: BooleanOperationFilterInput
  productBrands: ListFilterInputTypeOfProductBrandFilterInput
  vendorBrands: ListFilterInputTypeOfVendorBrandFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input ListFilterInputTypeOfProductBrandFilterInput {
  all: ProductBrandFilterInput
  none: ProductBrandFilterInput
  some: ProductBrandFilterInput
  any: Boolean
}

input ProductBrandFilterInput {
  and: [ProductBrandFilterInput!]
  or: [ProductBrandFilterInput!]
  productBrandId: ComparableInt64OperationFilterInput
  productId: ComparableInt64OperationFilterInput
  brandId: ComparableInt64OperationFilterInput
  product: ProductFilterInput
  brand: BrandFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
  rowVersion: StringOperationFilterInput
}

input StandTypeOperationFilterInput {
  eq: StandType
  neq: StandType
  in: [StandType!]
  nin: [StandType!]
}

enum StandType {
  BAR
  POOL
  LOBBY
  RECEPTION
  RESTAURANT
  CONFERENCE_ROOM
  WARE_HOUSE
  KITCHEN
  NOT_SPECIFIED
}

input MovementTypeOperationFilterInput {
  eq: MovementType
  neq: MovementType
  in: [MovementType!]
  nin: [MovementType!]
}

enum MovementType {
  RECEPTION
  DELIVER
  DELIVER_TO_STAND
  EXPIRATION
}

input MeasureUnitSortInput {
  measureUnitId: SortEnumType
  name: SortEnumType
  code: SortEnumType
  cast: SortEnumType
  enable: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

enum SortEnumType {
  ASC
  DESC
}

input AttributeSortInput {
  attributeId: SortEnumType
  value: SortEnumType
  description: SortEnumType
  enable: SortEnumType
  measureUnitId: SortEnumType
  measureUnit: MeasureUnitSortInput
  attributeNameId: SortEnumType
  attributeName: AttributeNameSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

input AttributeNameSortInput {
  attributeNameId: SortEnumType
  name: SortEnumType
  enable: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

type ProductPhoto {
  productPhotoId: Long!
  photo: [Byte!]
  photoUrl: String
  designColor: String
  isInitialPhoto: Boolean!
  productId: Long!
  product(where: ProductFilterInput order: [ProductSortInput!]): Product
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

input ProductSortInput {
  productId: SortEnumType
  name: SortEnumType
  description: SortEnumType
  note: SortEnumType
  price: SortEnumType
  sellingPrice: SortEnumType
  amount: SortEnumType
  reOrderLevel: SortEnumType
  measureUnitId: SortEnumType
  measureUnit: MeasureUnitSortInput
  onStock: SortEnumType
  notifyReOrder: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

input ProductPhotoSortInput {
  productPhotoId: SortEnumType
  photoUrl: SortEnumType
  designColor: SortEnumType
  isInitialPhoto: SortEnumType
  productId: SortEnumType
  product: ProductSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

type Category {
  categoryId: Long!
  name: String!
  code: String
  enable: Boolean!
  parentCategoryId: Long
  parentCategory: Category
  childCategories(where: CategoryFilterInput order: [CategorySortInput!]): [Category!]
  products(where: ProductFilterInput order: [ProductSortInput!]): [Product!]
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

input CategorySortInput {
  categoryId: SortEnumType
  name: SortEnumType
  code: SortEnumType
  enable: SortEnumType
  parentCategoryId: SortEnumType
  parentCategory: CategorySortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

type PriceHistory {
  priceHistoryId: Long!
  productId: Long!
  product(where: ProductFilterInput order: [ProductSortInput!]): Product!
  oldPrice: Decimal!
  newPrice: Decimal!
  applicationUserId: String!
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

input PriceHistorySortInput {
  priceHistoryId: SortEnumType
  productId: SortEnumType
  product: ProductSortInput
  oldPrice: SortEnumType
  newPrice: SortEnumType
  applicationUserId: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

type ProductMovement {
  productMovementId: Long!
  productId: Long!
  movementId: Long!
  product: Product!
  movement: Movement!
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

type Movement {
  movementId: Long!
  amount: Decimal!
  price: Decimal
  description: String
  applicationUserId: String!
  productMovements(where: ProductMovementFilterInput order: [ProductMovementSortInput!]): [ProductMovement!]
  vendorId: Long
  vendor(where: VendorFilterInput order: [VendorSortInput!]): Vendor
  standType: StandType!
  movementType: MovementType!
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

input ProductMovementSortInput {
  productMovementId: SortEnumType
  productId: SortEnumType
  movementId: SortEnumType
  product: ProductSortInput
  movement: MovementSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

input MovementSortInput {
  movementId: SortEnumType
  amount: SortEnumType
  price: SortEnumType
  description: SortEnumType
  applicationUserId: SortEnumType
  vendorId: SortEnumType
  vendor: VendorSortInput
  standType: SortEnumType
  movementType: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

input VendorSortInput {
  vendorId: SortEnumType
  name: SortEnumType
  description: SortEnumType
  enable: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

type Vendor {
  vendorId: Long!
  name: String!
  description: String
  enable: Boolean!
  movements(where: MovementFilterInput order: [MovementSortInput!]): [Movement!]
  vendorBrands(where: VendorBrandFilterInput order: [VendorBrandSortInput!]): [VendorBrand!]
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

type VendorBrand {
  vendorBrandId: Long!
  vendorId: Long!
  brandId: Long!
  vendor(where: VendorFilterInput order: [VendorSortInput!]): Vendor!
  brand(where: BrandFilterInput order: [BrandSortInput!]): Brand!
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

type Brand {
  brandId: Long!
  name: String!
  enable: Boolean!
  productBrands(where: ProductBrandFilterInput order: [ProductBrandSortInput!]): [ProductBrand!]
  vendorBrands(where: VendorBrandFilterInput order: [VendorBrandSortInput!]): [VendorBrand!]
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

type ProductBrand {
  productBrandId: Long!
  productId: Long!
  brandId: Long!
  product(where: ProductFilterInput order: [ProductSortInput!]): Product!
  brand(where: BrandFilterInput order: [BrandSortInput!]): Brand!
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

input BrandSortInput {
  brandId: SortEnumType
  name: SortEnumType
  enable: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

input ProductBrandSortInput {
  productBrandId: SortEnumType
  productId: SortEnumType
  brandId: SortEnumType
  product: ProductSortInput
  brand: BrandSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

input VendorBrandSortInput {
  vendorBrandId: SortEnumType
  vendorId: SortEnumType
  brandId: SortEnumType
  vendor: VendorSortInput
  brand: BrandSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
  rowVersion: SortEnumType
}

type AttributeName {
  attributeNameId: Long!
  name: String!
  enable: Boolean!
  attributes(where: AttributeFilterInput order: [AttributeSortInput!]): [Attribute!]!
  createdAt: DateTime!
  updatedAt: DateTime
  rowVersion: String!
}

"A connection to a list of items."
type AttributesNamesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AttributesNamesEdge!]
  "A flattened list of the nodes."
  nodes: [AttributeName!]
}

"An edge in a connection."
type AttributesNamesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AttributeName!
}

"A connection to a list of items."
type BrandsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BrandsEdge!]
  "A flattened list of the nodes."
  nodes: [Brand!]
}

"An edge in a connection."
type BrandsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Brand!
}

"A connection to a list of items."
type CategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [Category!]
}

"An edge in a connection."
type CategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Category!
}

"A connection to a list of items."
type MeasureUnitsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MeasureUnitsEdge!]
  "A flattened list of the nodes."
  nodes: [MeasureUnit!]
}

"An edge in a connection."
type MeasureUnitsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MeasureUnit!
}

"A connection to a list of items."
type MovementsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MovementsEdge!]
  "A flattened list of the nodes."
  nodes: [Movement!]
}

"An edge in a connection."
type MovementsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Movement!
}

"A connection to a list of items."
type PriceHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PriceHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [PriceHistory!]
}

"An edge in a connection."
type PriceHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PriceHistory!
}

"A connection to a list of items."
type ProductBrandsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ProductBrandsEdge!]
  "A flattened list of the nodes."
  nodes: [ProductBrand!]
}

"An edge in a connection."
type ProductBrandsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ProductBrand!
}

"A connection to a list of items."
type ProductMovementsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ProductMovementsEdge!]
  "A flattened list of the nodes."
  nodes: [ProductMovement!]
}

"An edge in a connection."
type ProductMovementsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ProductMovement!
}

"A connection to a list of items."
type ProductPhotosConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ProductPhotosEdge!]
  "A flattened list of the nodes."
  nodes: [ProductPhoto!]
}

"An edge in a connection."
type ProductPhotosEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ProductPhoto!
}

"A connection to a list of items."
type ProductsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ProductsEdge!]
  "A flattened list of the nodes."
  nodes: [Product!]
}

"An edge in a connection."
type ProductsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Product!
}

"A connection to a list of items."
type VendorBrandsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [VendorBrandsEdge!]
  "A flattened list of the nodes."
  nodes: [VendorBrand!]
}

"An edge in a connection."
type VendorBrandsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: VendorBrand!
}

"A connection to a list of items."
type VendorsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [VendorsEdge!]
  "A flattened list of the nodes."
  nodes: [Vendor!]
}

"An edge in a connection."
type VendorsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Vendor!
}

type Mutation {
  adminProductNewMovement(input: ProductNewMovementInputModelInput!): ProductMovement!
  attributeCreate(input: AttributeCreateInputModelInput!): Attribute!
  attributeUpdate(input: AttributeUpdateInputModelInput!): Attribute!
  attributeDelete(input: AttributeDeleteInputModelInput!): Boolean!
  attributeNameCreate(input: AttributeNameCreateInputModelInput!): AttributeName!
  attributeNameUpdate(input: AttributeNameUpdateInputModelInput!): AttributeName!
  attributeNameDelete(input: AttributeNameDeleteInputModelInput!): Boolean!
  brandCreate(input: BrandCreateInputModelInput!): Brand!
  brandUpdate(input: BrandUpdateInputModelInput!): Brand!
  brandDelete(input: BrandDeleteInputModelInput!): Boolean!
  categoryCreate(input: CategoryCreateInputModelInput!): Category!
  categoryUpdate(input: CategoryUpdateInputModelInput!): Category!
  categoryDelete(input: CategoryDeleteInputModelInput!): Boolean!
  measureUnitCreate(input: MeasureUnitCreateInputModelInput!): MeasureUnit!
  measureUnitUpdate(input: MeasureUnitUpdateInputModelInput!): MeasureUnit!
  measureUnitDelete(input: MeasureUnitDeleteInputModelInput!): Boolean!
  movementCreate(input: MovementCreateInputModelInput!): Movement!
  movementUpdate(input: MovementUpdateInputModelInput!): Movement!
  movementDelete(input: MovementDeleteInputModelInput!): Boolean!
  productCreate(input: ProductCreateInputModelInput!): Product!
  productUpdate(input: ProductUpdateInputModelInput!): Product!
  productDelete(input: ProductDeleteInputModelInput!): Boolean!
  vendorCreate(input: VendorCreateInputModelInput!): Vendor!
  vendorUpdate(input: VendorUpdateInputModelInput!): Vendor!
  vendorDelete(input: VendorDeleteInputModelInput!): Boolean!
}

input ProductNewMovementInputModelInput {
  productId: Long!
  movementType: MovementType!
  amount: Decimal!
  price: Decimal!
  description: String!
  applicationUserId: String!
  vendorId: Long!
  standType: StandType!
}

input AttributeCreateInputModelInput {
  value: String!
  description: String!
  measureUnitId: Long!
  attributeNameId: Long!
}

input AttributeUpdateInputModelInput {
  id: Long!
  value: String
  description: String
  measureUnitId: Long!
  attributeNameId: Long!
}

input AttributeDeleteInputModelInput {
  id: Long!
}

input AttributeNameCreateInputModelInput {
  name: String!
  enable: Boolean!
}

input AttributeNameUpdateInputModelInput {
  id: Long!
  name: String!
  enable: Boolean!
}

input AttributeNameDeleteInputModelInput {
  id: Long!
}

input BrandCreateInputModelInput {
  name: String!
  enable: Boolean!
}

input BrandUpdateInputModelInput {
  id: Long!
  name: String
  enable: Boolean
}

input BrandDeleteInputModelInput {
  id: Long!
}

input CategoryCreateInputModelInput {
  name: String!
  code: String!
  enable: Boolean!
  parentCategoryId: Long!
}

input CategoryUpdateInputModelInput {
  id: Long!
  name: String!
  code: String!
  enable: Boolean!
  parentCagetoryId: Long!
}

input CategoryDeleteInputModelInput {
  id: Long!
}

input MeasureUnitCreateInputModelInput {
  name: String!
  code: String!
  cast: Cast!
  enable: Boolean!
}

input MeasureUnitUpdateInputModelInput {
  id: Long!
  name: String!
  code: String!
  cast: Cast!
}

input MeasureUnitDeleteInputModelInput {
  id: Long!
}

input MovementCreateInputModelInput {
  amount: Decimal!
  price: Decimal!
  description: String!
  applicationUserId: String!
  vendorId: Long!
  standType: StandType!
  movementType: MovementType!
}

input MovementUpdateInputModelInput {
  id: Long!
  amount: Decimal!
  price: Decimal!
  description: String!
  applicationUserId: String!
  vendorId: Long!
  standType: StandType!
  movementType: MovementType!
}

input MovementDeleteInputModelInput {
  id: Long!
}

input ProductCreateInputModelInput {
  name: String!
  description: String!
  note: String!
  price: Decimal!
  sellingPrice: Decimal!
  amount: Decimal!
  reOrderLevel: Decimal!
  measureUnitId: Long!
  attributesIds: [Long!]
  categoriesIds: [Long!]
  productPhotosId: [Long!]
  productBrandsId: [Long!]
}

input ProductUpdateInputModelInput {
  id: Long!
  name: String!
  description: String!
  note: String!
  price: Decimal!
  sellingPrice: Decimal!
  amount: Decimal!
  reOrderLevel: Decimal!
  attributesIds: [Long!]
  categoriesIds: [Long!]
  productPhotosIds: [Long!]
  productBrandsIds: [Long!]
}

input ProductDeleteInputModelInput {
  id: Long!
}

input VendorCreateInputModelInput {
  name: String!
  description: String!
}

input VendorUpdateInputModelInput {
  id: Long!
  name: String!
  description: String!
  enable: Boolean!
}

input VendorDeleteInputModelInput {
  id: Long!
}